#include <TimerOne.h>

const int arraySize = 300;
int senoidal[300] = {0x80,
0x82,
0x85,
0x87,
0x8A,
0x8D,
0x8F,
0x92,
0x95,
0x97,
0x9A,
0x9D,
0x9F,
0xA2,
0xA4,
0xA7,
0xA9,
0xAC,
0xAE,
0xB1,
0xB3,
0xB6,
0xB8,
0xBA,
0xBD,
0xBF,
0xC1,
0xC4,
0xC6,
0xC8,
0xCA,
0xCC,
0xCE,
0xD0,
0xD2,
0xD4,
0xD6,
0xD8,
0xDA,
0xDC,
0xDE,
0xE0,
0xE1,
0xE3,
0xE5,
0xE6,
0xE8,
0xE9,
0xEB,
0xEC,
0xED,
0xEF,
0xF0,
0xF1,
0xF2,
0xF4,
0xF5,
0xF6,
0xF7,
0xF7,
0xF8,
0xF9,
0xFA,
0xFB,
0xFB,
0xFC,
0xFC,
0xFD,
0xFD,
0xFD,
0xFE,
0xFE,
0xFE,
0xFE,
0xFE,
0xFF,
0xFE,
0xFE,
0xFE,
0xFE,
0xFE,
0xFD,
0xFD,
0xFD,
0xFC,
0xFC,
0xFB,
0xFB,
0xFA,
0xF9,
0xF8,
0xF7,
0xF7,
0xF6,
0xF5,
0xF4,
0xF2,
0xF1,
0xF0,
0xEF,
0xED,
0xEC,
0xEB,
0xE9,
0xE8,
0xE6,
0xE5,
0xE3,
0xE1,
0xE0,
0xDE,
0xDC,
0xDA,
0xD8,
0xD6,
0xD4,
0xD2,
0xD0,
0xCE,
0xCC,
0xCA,
0xC8,
0xC6,
0xC4,
0xC1,
0xBF,
0xBD,
0xBA,
0xB8,
0xB6,
0xB3,
0xB1,
0xAE,
0xAC,
0xA9,
0xA7,
0xA4,
0xA2,
0x9F,
0x9D,
0x9A,
0x97,
0x95,
0x92,
0x8F,
0x8D,
0x8A,
0x87,
0x85,
0x82,
0x80,
0x7D,
0x7A,
0x78,
0x75,
0x72,
0x70,
0x6D,
0x6A,
0x68,
0x65,
0x62,
0x60,
0x5D,
0x5B,
0x58,
0x56,
0x53,
0x51,
0x4E,
0x4C,
0x49,
0x47,
0x45,
0x42,
0x40,
0x3E,
0x3B,
0x39,
0x37,
0x35,
0x33,
0x31,
0x2F,
0x2D,
0x2B,
0x29,
0x27,
0x25,
0x23,
0x21,
0x1F,
0x1E,
0x1C,
0x1A,
0x19,
0x17,
0x16,
0x14,
0x13,
0x12,
0x10,
0xF,
0xE,
0xD,
0xB,
0xA,
0x9,
0x8,
0x8,
0x7,
0x6,
0x5,
0x4,
0x4,
0x3,
0x3,
0x2,
0x2,
0x2,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x1,
0x2,
0x2,
0x2,
0x3,
0x3,
0x4,
0x4,
0x5,
0x6,
0x7,
0x8,
0x8,
0x9,
0xA,
0xB,
0xD,
0xE,
0xF,
0x10,
0x12,
0x13,
0x14,
0x16,
0x17,
0x19,
0x1A,
0x1C,
0x1E,
0x1F,
0x21,
0x23,
0x25,
0x27,
0x29,
0x2B,
0x2D,
0x2F,
0x31,
0x33,
0x35,
0x37,
0x39,
0x3B,
0x3E,
0x40,
0x42,
0x45,
0x47,
0x49,
0x4C,
0x4E,
0x51,
0x53,
0x56,
0x58,
0x5B,
0x5D,
0x60,
0x62,
0x65,
0x68,
0x6A,
0x6D,
0x70,
0x72,
0x75,
0x78,
0x7A,
0x7D};
int triangular[300] = {0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75,
0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75,
0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75,
0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75,
0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75,
0x80,
0x8A,
0x94,
0x9E,
0xA8,
0xB2,
0xBC,
0xC7,
0xD1,
0xDB,
0xE5,
0xEF,
0xF9,
0xF9,
0xEF,
0xE5,
0xDB,
0xD1,
0xC6,
0xBC,
0xB2,
0xA8,
0x9E,
0x93,
0x89,
0x7F,
0x75,
0x6B,
0x60,
0x56,
0x4C,
0x42,
0x38,
0x2D,
0x23,
0x19,
0xF,
0x5,
0x5,
0xF,
0x19,
0x23,
0x2E,
0x38,
0x42,
0x4C,
0x57,
0x61,
0x6B,
0x75};

volatile bool comparisonResult;
int val = 0;
void setup() {
  pinMode(13, OUTPUT);

  // Set up Timer1 for a 10ms interval
  Timer1.initialize(1000);  // Set the interval to 10ms
  Timer1.attachInterrupt(compareArrays);  // Attach the compareArrays function to the interrupt
}

void loop() {
  // Your main code goes here
}

void compareArrays() {
  // Compare arrays here
  float amplitud = analogRead(A0) / 1023.0;

  float seno = float(senoidal[val])*amplitud + 128*(1-amplitud);
  int comp = int(seno);


    if (seno > triangular[val]) {
      digitalWrite(13, HIGH);
    }else{
      digitalWrite(13, LOW);
    }

    val++;
    if(val>arraySize){
      val = 0;
    }
  

}
